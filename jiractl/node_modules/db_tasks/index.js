// REVIEW: Was ist das für ein Tool, mit diesen inline-Tests? Gewöhungsbedürftig, habe mich noch nicht entschieden ob ich es mag :-)
module.exports = function (mongoose) {
  var taskSchema = new mongoose.Schema({
    project: Number,
    jiraTask: Number,
    statusCode: Number,
    user: String
  }),
    Task = mongoose.model('task', taskSchema);



  /**
   * Database Communication
   */

  Task.getTasksFromDB = function (projectId, callback) {
    if(callback) {
      if(projectId) {
        Task.find({
          project: projectId
        }, callback);
      } else {
        callback(new Error("Invalid ProjectId passed to getTasksFromDB"));
      }
    } else {
      throw new Error("No Callback passed to getTasksFromDB");
    }
  };

  /*testcbnoe Task.getTasksFromDB, [1], "Get Tasks From DB"*/
  /*throws Task.getTasksFromDB, [], function (err) {return true;}, "Get Tasks From DB: Throw an Error if no Arguments are passed"*/
  /*throws Task.getTasksFromDB, [1], function (err) {return true;}, "Get Tasks From DB: Throw an Error if no Callback is passed"*/
  /*testcberror Task.getTasksFromDB, [undefined], "Get Tasks From DB: Reject undefined ProjectId"*/

  Task.saveTaskToDB = function (task, callback) {
    if(callback) {
      if(task && task.project && task.jiraTask && task.statusCode && task.user) {
        var dbTask = new Task();
        dbTask.project = task.project;
        dbTask.jiraTask = task.jiraTask;
        dbTask.statusCode = task.statusCode;
        dbTask.user = task.user;
        dbTask.save(callback);
      } else {
        callback(new Error("Invalid Task passed to saveTaskToDB"));
      }
    } else {
     throw new Error("No Callback passed to saveTaskToDB");
    }
  };

  /*testcbnoe Task.saveTaskToDB, [{project: 1, jiraTask: 2, statusCode: 3, user: "testuser"}], "Save Task to DB"*/
  /*throws Task.saveTaskToDB, [], function (err) {return true;}, "Save Task To DB: Throw an Error if no Arguments are passed"*/
  /*throws Task.saveTaskToDB, [{project: 1, jiraTask: 2, statusCode: 3, user: "testuser"}], function (err) {return true;}, "Save Task To DB: Throw an Error if no Callback is passed"*/
  /*testcberror Task.saveTaskToDB, [undefined], "Save Task To DB: Reject undefined Task"*/
  /*testcberror Task.saveTaskToDB, [{jiraTask: 2, statusCode: 3, user: "testuser"}], "Save Task To DB: Reject Task without ProjectId"*/
  /*testcberror Task.saveTaskToDB, [{project: 1, statusCode: 3, user: "testuser"}], "Save Task To DB: Reject Task without Jira-Task"*/
  /*testcberror Task.saveTaskToDB, [{project: 1, jiraTask: 2, user: "testuser"}], "Save Task To DB: Reject Task without Status-Code"*/
  /*testcberror Task.saveTaskToDB, [{project: 1, jiraTask: 2, statusCode: 3}], "Save Task To DB: Reject Task without User"*/

  Task.deleteTasksFromDB = function (projectId, taskId, callback) {
    if(callback) {
      if(projectId) {
        if(taskId) {
          // Removing all Task-Updates that belong to the Task
          Task.remove({
            project: projectId,
            jiraTask: taskId
          }, callback);
        } else {
          callback(new Error("Invalid TaskId passed to deleteTasksFromDB"));
        }
      } else {
        callback(new Error("Invalid ProjectId passed to deleteTasksFromDB"));
      }
    } else {
      throw new Error("No Callback passed to deleteTasksFromDB");
    }
  };

  /*testcbnoe Task.deleteTasksFromDB, [1, 1], "Delete Tasks From DB"*/
  /*throws Task.deleteTasksFromDB, [], function (err) {return true;}, "Delete Tasks From DB: Throw an Error if no Arguments are passed"*/
  /*throws Task.deleteTasksFromDB, [1, 1], function (err) {return true;}, "Delete Tasks From DB: Throw an Error if no Callback is passed"*/
  /*testcberror Task.deleteTasksFromDB, [undefined, undefined], "Delete Tasks From DB: Reject undefined ProjectId and TaskId"*/
  /*testcberror Task.deleteTasksFromDB, [undefined, 1], "Delete Tasks From DB: Reject undefined ProjectId"*/
  /*testcberror Task.deleteTasksFromDB, [1, undefined], "Delete Tasks From DB: Reject undefined TaskId"*/

  return Task;
};

/*test
  var mongoose = require('mongoose');
  mongoose.connect('mongodb://localhost/test');
  module.exports(mongoose);
*/

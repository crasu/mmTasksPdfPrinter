module.exports = function (mongoose, Task) {
  var projectSchema = new mongoose.Schema({
    project: Number,
    stepNames: [String],
    password: String,
    users: [String]
  }),
    Project = mongoose.model('project', projectSchema);

  /**
   * Database Communication
   */

  Project.getProjectsFromDB = function (projectId, callback) {
    if(callback) {
      if(projectId) {
        Project.find({
          project: projectId
        }, callback);
      } else {
        callback(new Error("Invalid ProjectId passed to getProjectsFromDB"));
      }
    } else {
      throw new Error("No Callback passed to getProjectsFromDB");
    }
  };

  /*testcbnoe Project.getProjectsFromDB, [1], "Get Projects From DB"*/
  /*throws Project.getProjectsFromDB, [], function (err) {return true;}, "Get Projects From DB: Throw an Error if no Arguments are passed"*/
  /*throws Project.getProjectsFromDB, [1], function (err) {return true;}, "Get Projects From DB: Throw an Error if no Callback is passed"*/
  /*testcberror Project.getProjectsFromDB, [undefined], "Get Projects From DB: Reject undefined ProjectId"*/

  Project.getAllProjectsFromDB = function (callback) {
    if(callback) {
      Project.find({ }, callback);
    } else {
      throw new Error("No Callback passed to getProjectsFromDB");
    }
  };

  /*testcbnoe Project.getAllProjectsFromDB, [], "Get All Projects From DB"*/
  /*throws Project.getAllProjectsFromDB, [], function (err) {return true;}, "Get All Projects From DB: Throw an Error if no Callback is passed"*/

  Project.saveProjectToDB = function (project, callback) {
    if(callback) {
      if(project && project.project && project.stepNames && project.password && project.users) {
        Project.getProjectsFromDB(project.project, function (err, projects) {
          if(!err && projects && projects.length === 0) {
            var dbProject = new Project();
            dbProject.project = project.project;
            dbProject.stepNames = project.stepNames;
            dbProject.password = project.password;
            dbProject.users = project.users;
            dbProject.save(callback);
          } else {
            if(err) {
              /*print "ERROR:".bold.red, err*/
            } else {
              /*print "Found Projects in DB:".cyan, projects*/
            }
            callback(null);
          }
        });
      } else {
        /*print "Invalid Project passed to saveProjectToDB:", project*/
        callback(new Error("Invalid Project passed to saveProjectToDB"));
      }
    } else {
      throw new Error("No Callback passed to saveProjectToDB");
    }
  };

  /*testcbnoe Project.saveProjectToDB, [{project: 1, stepNames: [], password: "maynotbeempty", users: ["test"]}], "Save Project to DB"*/
  /*throws Project.saveProjectToDB, [], function (err) {return true;}, "Save Project To DB: Throw an Error if no Arguments are passed"*/
  /*throws Project.saveProjectToDB, [{project: 1, stepNames: [], password: "maynotbeempty", users: []}], function (err) {return true;}, "Save Project To DB: Throw an Error if no Callback is passed"*/
  /*testcberror Project.saveProjectToDB, [undefined], "Save Project To DB: Reject undefined Project"*/
  /*testcberror Project.saveProjectToDB, [{stepNames: [], password: "maynotbeempty", users: []}], "Save Project To DB: Reject Project without ProjectId"*/
  /*testcberror Project.saveProjectToDB, [{project: 1, password: "maynotbeempty", users: []}], "Save Project To DB: Reject Project without stepNames"*/
  /*testcberror Project.saveProjectToDB, [{project: 1, stepNames: [], users: []}], "Save Project To DB: Reject Project without Password"*/
  /*testcberror Project.saveProjectToDB, [{project: 1, stepNames: [], password: "", users: []}], "Save Project To DB: Reject Project with empty Password"*/
  /*testcberror Project.saveProjectToDB, [{project: 1, stepNames: [], password: "maynotbeempty"}], "Save Project To DB: Reject Project without Users"*/

  Project.updateProjectStepNamesToDB = function (project, callback) {
    if(callback) {
      if(project && project.project && project.stepNames) {
        Project.update({
          project: project.project
        }, {
          stepNames: project.stepNames
        }, { }, callback);
      } else {
        callback(new Error("Invalid Project passed to updateProjectStepNamesToDB"));
      }
    } else {
      throw new Error("No Callback passed to updateProjectStepNamesToDB");
    }
  };

  /*testcbnoe Project.updateProjectStepNamesToDB, [{project: 1, stepNames: ["Start Progress", "Stop Progress"]}], "Update Project Step-Names To DB"*/
  /*throws Project.updateProjectStepNamesToDB, [], function (err) {return true;}, "Update Project Step-Names To DB: Throw an Error if no Arguments are passed"*/
  /*throws Project.updateProjectStepNamesToDB, [{project: 1, stepNames: ["Start Progress", "Stop Progress"]}], function (err) {return true;}, "Update Project Step-Names To DB: Throw an Error if no Callback is passed"*/
  /*testcberror Project.updateProjectStepNamesToDB, [undefined], "Update Project Step-Names To DB: Reject undefined Project"*/
  /*testcberror Project.updateProjectStepNamesToDB, [{stepNames: []}], "Update Project Step-Names To DB: Reject Project without ProjectId"*/
  /*testcberror Project.updateProjectStepNamesToDB, [{project: 1}], "Update Project Step-Names To DB: Reject Project without Step-Names"*/

  Project.updateProjectUserAddToDB = function (projectId, user, callback) {
    if(callback) {
      if(projectId && user) {
        Project.update({
          project: projectId
        }, {
          $push: { users: user }
        }, { }, callback);
      } else {
        callback(new Error("Invalid Username or ProjectId passed to updateProjectUserAddToDB"));
      }
    } else {
      throw new Error("No Callback passed to updateProjectUserAddToDB");
    }
  };

  /*testcbnoe Project.updateProjectUserAddToDB, [1, "testuser"], "Update Project: User Add To DB"*/
  /*throws Project.updateProjectUserAddToDB, [], function (err) {return true;}, "Update Project: User Add To DB: Throw an Error if no Arguments are passed"*/
  /*throws Project.updateProjectUserAddToDB, [1, "testuser"], function (err) {return true;}, "Update Project: User Add To DB: Throw an Error if no Callback is passed"*/
  /*testcberror Project.updateProjectUserAddToDB, [undefined, undefined], "Update Project: User Add To DB: Reject undefined ProjectId and User"*/
  /*testcberror Project.updateProjectUserAddToDB, [undefined, "testuser"], "Update Project: User Add To DB: Reject undefined ProjectId"*/
  /*testcberror Project.updateProjectUserAddToDB, [1, undefined], "Update Project: User Add To DB: Reject undefined User"*/

  Project.updateProjectUserDelFromDB = function (projectId, user, callback) {
    if(callback) {
      if(projectId && user) {
        Project.update({
          project: projectId
        }, {
          $pull: { users: user }
        }, { }, callback);
      } else {
        callback(new Error("Invalid Username or ProjectId passed to updateProjectUserDelFromDB"));
      }
    } else {
      throw new Error("No Callback passed to updateProjectUserDelFromDB");
    }
  };

  /*testcbnoe Project.updateProjectUserDelFromDB, [1, "testuser"], "Update Project: User Del From DB"*/
  /*throws Project.updateProjectUserDelFromDB, [], function (err) {return true;}, "Update Project: User Del From DB: Throw an Error if no Arguments are passed"*/
  /*throws Project.updateProjectUserDelFromDB, [1, "testuser"], function (err) {return true;}, "Update Project: User Del From DB: Throw an Error if no Callback is passed"*/
  /*testcberror Project.updateProjectUserDelFromDB, [undefined, undefined], "Update Project: User Add To DB: Reject undefined ProjectId and User"*/
  /*testcberror Project.updateProjectUserDelFromDB, [undefined, "testuser"], "Update Project: User Add To DB: Reject undefined ProjectId"*/
  /*testcberror Project.updateProjectUserDelFromDB, [1, undefined], "Update Project: User Add To DB: Reject undefined User"*/

  Project.deleteProjectsFromDB = function (projectId, callback) {
    if(callback) {
      if(projectId) {
        // Removing all Task-Updates that belong to the Project
        if(Task) {
          Task.deleteTasksFromDB(projectId, function (err) {
            if(err) {
              /*print "Aborting deleteProjectsFromDB:", err*/
              callback(err);
            } else {
              Project.remove({
                project: projectId
              }, callback);
            }
          });
        } else {
          Project.remove({
            project: projectId
          }, callback);
        }
      } else {
        callback(new Error("Invalid ProjectId passed to deleteProjectsFromDB"));
      }
    } else {
      throw new Error("No Callback passed to deleteProjectsFromDB");
    }
  };

  /*testcbnoe Project.deleteProjectsFromDB, [1], "Delete Projects From DB"*/
  /*throws Project.deleteProjectsFromDB, [], function (err) {return true;}, "Delete Projects From DB: Throw an Error if no Arguments are passed"*/
  /*throws Project.deleteProjectsFromDB, [1], function (err) {return true;}, "Delete Projects From DB: Throw an Error if no Callback is passed"*/
  /*testcberror Project.deleteProjectsFromDB, [undefined], "Delete Projects From DB: Reject undefined "*/
/*print Project*/
  return Project;
};

/*test
  var mongoose = require('mongoose');
  mongoose.connect('mongodb://localhost/test');
  module.exports(mongoose);
*/

module.exports = {
  progressTask: function (jiraCliPath, jiraUrl, jiraUser, jiraPass, jiraProject, jiraTaskId, jiraTaskStep, jiraTaskAssignee, callback) {
    if(jiraCliPath && jiraUrl && jiraUser && jiraPass && jiraProject && jiraTaskId && jiraTaskStep && jiraTaskAssignee && callback) {
      var cp = require('child_process');
      var errorCallback = function (nr) {
        return function (err) {
          console.log("Error progressing Issue " + jiraProject + "-" + jiraTaskId + ":", err.toString());
          if(nr === 0) {
            outputCallback(1);
          }
        };
      };
      var outputCallback = function (nr) {
        if(nr === 0) {
          return function (data) {
            /*log data.toString()*/
            process = cp.spawn(jiraCliPath, ['-a', 'updateIssue', '-s', jiraUrl, '-u', jiraUser, '-p', jiraPass, '--project', jiraProject, '--issue', jiraProject + '-' + jiraTaskId, '--assignee', jiraTaskAssignee]);
            process.stderr.on('data', errorCallback(1));
            process.stdout.once('data', outputCallback(1));
          };
        } else if(nr === 1) {
          return function (data) {
            /*log data.toString()*/
            callback(null);
          };
        }
      };
      var process = cp.spawn(jiraCliPath, ['-a', 'progressIssue', '-s', jiraUrl, '-u', jiraUser, '-p', jiraPass, '--project', jiraProject, '--issue', jiraProject + '-' + jiraTaskId, '--step', jiraTaskStep]);
      process.stderr.on('data', errorCallback(0));
      process.stdout.once('data', outputCallback(0));
    } else if(callback) {
      callback(new Error("Invalid Parameter passed to 'jiraconnector'"));
    } else {
      throw new Error("Not enough Parameters passed to 'jiraconnector'");
    }
  },

  getAvailableWorksteps: function (jiraCliPath, jiraUrl, jiraUser, jiraPass, jiraProject, jiraTaskId, callback) {
    if(jiraCliPath && jiraUrl && jiraUser && jiraPass && jiraProject && jiraTaskId && callback) {
      var cp = require('child_process');
      var process = cp.spawn(jiraCliPath, ['-a', 'getAvailableSteps', '-s', jiraUrl, '-u', jiraUser, '-p', jiraPass, '--project', jiraProject, '--issue', jiraProject + '-' + jiraTaskId]);
      process.stderr.on('data', function (err) {
        callback(new Error("Error reading Workflow-Steps from Jira"));
      });
      process.stdout.once('data', function (data) {
        var output = data.toString(),
            lines = output.split('\n'),
            stepNames = [];
        var i;
        var tmp;
        for(i = 2; i < lines.length; i++) {
          tmp = JSON.parse('[' + lines[i] + ']');
          if(tmp && tmp[1]) {
            stepNames.push(tmp[1]);
          }
        }
        callback(null, stepNames);
      });
    } else if (callback) {
      callback(new Error("Invalid Parameter passed to 'jiraconnector'"));
    } else {
      throw new Error("Not enough Parameters passed to 'jiraconnector'");
    }
  },

  getIssueInfo: function (jiraCliPath, jiraUrl, jiraUser, jiraPass, jiraProject, jiraTaskId, callback) {
    if(jiraCliPath && jiraUrl && jiraUser && jiraPass && jiraProject && jiraTaskId && callback) {
      var cp = require('child_process');
      var process = cp.spawn(jiraCliPath, ['-a', 'getIssue', '-s', jiraUrl, '-u', jiraUser, '-p', jiraPass, '--project', jiraProject, '--issue', jiraProject + '-' + jiraTaskId]);
      process.stderr.on('data', function (err) {
        callback(new Error("Error reading Issue-Info from Jira"));
      });
      process.stdout.once('data', function (data) {
        var output = data.toString(),
            lines = output.split('\n'),
            issueInfo = '<p class="issueInfo">' + jiraProject + '-' + jiraTaskId + ': ',
            issueText,
            taskStatus,
            taskAssignee;
        var i;
        var tmp;
        for(i = 2; i < lines.length; i++) {
          tmp = lines[i].match(/^Summary[. ]*: ([a-zA-Z0-9 \-\\\/\?\!.()]*)/);
          if(tmp) {
            issueText = tmp[1];
          }
          tmp = lines[i].match(/^Status[. ]*: ([a-zA-Z0-9 \-\?\!.()]*)/);
          if(tmp) {
            taskStatus = tmp[1];
          }
          tmp = lines[i].match(/^Assignee[. ]*: ([a-zA-Z0-9 \-()]*)/);
          if(tmp) {
            taskAssignee = tmp[1];
          }
        }
        if(issueText) {
          issueInfo += issueText + '<br />';
          if(taskStatus) {
            issueInfo += '<br />Status: ' + taskStatus;
          }
          if(taskAssignee) {
            issueInfo += '<br />Assignee: ' + taskAssignee;
          }
          issueInfo += '</p>';
          callback(null, issueInfo);
        } else {
          callback(new Error("Could not read Task-Summary"));
        }
      });
    } else if (callback) {
      callback(new Error("Invalid Parameter passed to 'jiraconnector'"));
    } else {
      throw new Error("Not enough Parameters passed to 'jiraconnector'");
    }
  }
};

var cp = require('child_process');
var async = require('async');

// REVIEW: viel, viel besser. Der Einsatz von async hat sich gelohnt!
// Auch hier: logging Kommentare durch ein Framework ersetzen und Loglevel nutzen
// Ansonsten schon sehr gut, manche Teile, gerade im unteren Bereich k√∂nnte man
// vllt. noch in Funktionen auslagern

var getOutputCallback = function (callback) {
  return function (data) {
    callback(null, data);
  };
};

module.exports = {
  progressTask: function (jiraConfig, jiraTaskId, jiraTaskStep, jiraTaskAssignee, callback) {
    if(typeof jiraConfig === 'object' && typeof jiraTaskId === 'string' && typeof jiraTaskStep === 'string' && typeof jiraTaskAssignee === 'string' && typeof callback === 'function') {
      var process;
      async.waterfall([
        function (cb) {
          process = cp.spawn(jiraConfig.jiraCliPath + '/jira.sh', ['-a', 'progressIssue', '-s', jiraConfig.jiraUrl, '-u', jiraConfig.jiraUser, '-p', jiraConfig.jiraPass, '--project', jiraConfig.projectName, '--issue', jiraConfig.projectName + '-' + jiraTaskId, '--step', jiraTaskStep]);
          process.stderr.on('data', cb);
          process.stdout.once('data', getOutputCallback(cb));
        },
        function (data, cb) {
          /*log data.toString()*/
          process = cp.spawn(jiraConfig.jiraCliPath + '/jira.sh', ['-a', 'updateIssue', '-s', jiraConfig.jiraUrl, '-u', jiraConfig.jiraUser, '-p', jiraConfig.jiraPass, '--project', jiraConfig.projectName, '--issue', jiraConfig.projectName + '-' + jiraTaskId, '--assignee', jiraTaskAssignee]);
          process.stderr.on('data', cb);
          process.stdout.once('data', getOutputCallback(cb));
        }
      ], callback);
    } else if(typeof callback === 'function') {
      callback(new Error("Invalid Parameters passed to 'jiraconnector'"));
    } else {
      throw new Error("Invalid Parameters passed to 'jiraconnector'");
    }
  },

  getAvailableWorksteps: function (jiraConfig, jiraTaskId, callback) {
    if(typeof jiraConfig === 'object' && typeof jiraTaskId === 'string' && typeof callback === 'function') {
      var process;
      async.waterfall([
        function (cb) {
          process = cp.spawn(jiraConfig.jiraCliPath + '/jira.sh', ['-a', 'getAvailableSteps', '-s', jiraConfig.jiraUrl, '-u', jiraConfig.jiraUser, '-p', jiraConfig.jiraPass, '--project', jiraConfig.projectName, '--issue', jiraConfig.projectName + '-' + jiraTaskId]);
          process.stderr.on('data', cb);
          process.stdout.once('data', getOutputCallback(cb));
        },
        function (data, cb) {
          var output = data.toString(),
              lines = output.split('\n'),
              stepNames = [];
          var i;
          var tmp;
          for(i = 2; i < lines.length; i++) {
            tmp = JSON.parse('[' + lines[i] + ']');
            if(tmp && tmp[1]) {
              stepNames.push(tmp[1]);
            }
          }
          cb(null, stepNames);
        }
      ], callback);
    } else if (typeof callback === 'function') {
      callback(new Error("Invalid Parameters passed to 'jiraconnector'"));
    } else {
      throw new Error("Invalid Parameters passed to 'jiraconnector'");
    }
  },

  getIssueInfo: function (jiraConfig, jiraTaskId, callback) {
    if(typeof jiraConfig === 'object' && typeof jiraTaskId === 'string' && typeof callback === 'function') {
      var process;
      async.waterfall([
        function (cb) {
          process = cp.spawn(jiraConfig.jiraCliPath + '/jira.sh', ['-a', 'getIssue', '-s', jiraConfig.jiraUrl, '-u', jiraConfig.jiraUser, '-p', jiraConfig.jiraPass, '--project', jiraConfig.projectName, '--issue', jiraConfig.projectName + '-' + jiraTaskId]);
          process.stderr.on('data', cb);
          process.stdout.on('data', getOutputCallback(cb));
        },
        function (data, cb) {
          var output = data.toString();
          // This JiraCLI-call produces more than one output if jiraConfig.jiraUser and jiraConfig.jiraPass is a non-admin-user. Select the right ouput here.
          if(output.match(/Issue key/m) && output.match(/Summary/m)) {
            var lines = output.split('\n'),
                issueInfo = '<p class="issueInfo">' + jiraConfig.projectName + '-' + jiraTaskId + ': ',
                issueText,
                taskStatus,
                taskAssignee;
            var i;
            var tmp;
            for(i = 2; i < lines.length; i++) {
              tmp = lines[i].match(/^Summary[. ]*: ([a-zA-Z0-9 \-\\\/\?\!.()]*)/);
              if(tmp) {
                issueText = tmp[1];
              }
              tmp = lines[i].match(/^Status[. ]*: ([a-zA-Z0-9 \-\?\!.()]*)/);
              if(tmp) {
                taskStatus = tmp[1];
              }
              tmp = lines[i].match(/^Assignee[. ]*: ([a-zA-Z0-9 \-()]*)/);
              if(tmp) {
                taskAssignee = tmp[1];
              }
            }
            if(issueText) {
              issueInfo += issueText + '<br />';
              if(taskStatus) {
                issueInfo += '<br />Status: ' + taskStatus;
              }
              if(taskAssignee) {
                issueInfo += '<br />Assignee: ' + taskAssignee;
              }
              issueInfo += '</p>';
              cb(null, issueInfo);
            } else {
              cb(new Error("Could not read Task-Summary"));
            }
          }
        }
      ], callback);
    } else if (typeof callback === 'function') {
      callback(new Error("Invalid Parameters passed to 'jiraconnector'"));
    } else {
      throw new Error("Invalid Parameters passed to 'jiraconnector'");
    }
  }
};
